# Разработайте программу для работы с прямоугольниками. 
# Необходимо создать класс Rectangle, который будет представлять прямоугольник с заданными шириной и высотой.

# Атрибуты класса:

# width (int): Ширина прямоугольника. height (int): Высота прямоугольника.

# Методы класса:

# __init__(self, width, height=None): Конструктор класса. 
# Принимает ширину и высоту прямоугольника. 
# Если высота не указана (по умолчанию None), то считается, что прямоугольник является квадратом, 
# и высота устанавливается равной ширине.

# perimeter(self): Метод для вычисления периметра прямоугольника. 
# Возвращает целое число - значение периметра.

# area(self): Метод для вычисления площади прямоугольника. 
# Возвращает целое число - значение площади.

# __add__(self, other): Магический метод, 
# который определяет операцию сложения (+) для двух прямоугольников. 
# Принимает другой прямоугольник other. Создает новый прямоугольник, 
# который представляет собой объединение исходных прямоугольников по периметру. 
# Новая ширина и высота вычисляются также на основе объединения. Возвращает новый прямоугольник.

# __sub__(self, other): Магический метод, который определяет операцию вычитания (-) 
# одного прямоугольника из другого. Принимает вычитаемый прямоугольник other. 
# Создает новый прямоугольник, представляющий разницу периметров исходных прямоугольников, 
# и вычисляет высоту на основе этой разницы. Новая ширина вычисляется также на основе разницы. 
# Возвращает новый прямоугольник.

# __lt__(self, other): Магический метод, который определяет операцию "меньше" (<) 
# для двух прямоугольников. Принимает другой прямоугольник other. Возвращает True, 
# если площадь первого прямоугольника меньше площади второго, иначе False.

# __eq__(self, other): Магический метод, который определяет операцию "равно" (==) 
# для двух прямоугольников. Принимает другой прямоугольник other. 
# Возвращает True, если площади равны, иначе False.

# __le__(self, other): Магический метод, который определяет операцию "меньше или равно" (<=) 
# для двух прямоугольников. Принимает другой прямоугольник other. Возвращает True, 
# если площадь первого прямоугольника меньше или равна площади второго, иначе False.

# __str__(self): Магический метод, возвращающий строковое представление прямоугольника. 
# Возвращает строку, описывающую ширину и высоту прямоугольника в виде:
# Прямоугольник со сторонами 2 и 3,
# где первое число - это ширина, а второе - высота.

# __repr__(self): Магический метод, возвращающий строковое представление прямоугольника, 
# которое может быть использовано для создания нового объекта такого же класса с теми же атрибутами.

# Пояснение:

# Метод __add__ объединяет два прямоугольника по периметру и создает новый прямоугольник.
# Метод __sub__ вычитает один прямоугольник из другого, представляя разницу периметров исходных 
# прямоугольников, и создает новый прямоугольник.
# Методы сравнения __lt__, __eq__ и __le__ сравнивают прямоугольники по их площади.
# Методы __str__ и __repr__ предоставляют строковое представление объекта класса Rectangle.

class Rectangle:
    """
    Класс, представляющий прямоугольник.

    Атрибуты:
    - width (int): ширина прямоугольника
    - height (int): высота прямоугольника

    Методы:
    - perimeter(): вычисляет периметр прямоугольника
    - area(): вычисляет площадь прямоугольника
    - __add__(other): определяет операцию сложения двух прямоугольников
    - __sub__(other): определяет операцию вычитания одного прямоугольника из другого
    - __lt__(other): определяет операцию "меньше" для двух прямоугольников
    - __eq__(other): определяет операцию "равно" для двух прямоугольников
    - __le__(other): определяет операцию "меньше или равно" для двух прямоугольников
    - __str__(): возвращает строковое представление прямоугольника
    - __repr__(): возвращает строковое представление прямоугольника, которое может быть использовано для создания нового объекта
    """

    def __init__(self, length, width=None):
        self.length = length
        self.width = width if width else length
       
    def area(self):
        """
        Вычисляет площадь прямоугольника.

        Возвращает:
        - int: площадь прямоугольника
        """        
        return self.length * self.width

    def perimeter(self):
        """
        Вычисляет периметр прямоугольника.

        Возвращает:
        - int: периметр прямоугольника
        """       
        return 2 * (self.length  + self.width)

    def __add__(self, other: 'Rectangle'):
        """
        Определяет операцию сложения двух прямоугольников.

        Аргументы:
        - other (Rectangle): второй прямоугольник

        Возвращает:
        - Rectangle: новый прямоугольник, полученный путем сложения двух исходных прямоугольников
        """
        new_perim = self.perimeter() + other.perimeter()  
        new_length = self.length + other.length  
        new_width = round(new_perim / 2 - new_length)  
        return Rectangle(new_length, new_width)

    def __sub__(self, other: 'Rectangle'):
        """
        Определяет операцию вычитания одного прямоугольника из другого.

        Аргументы:
        - other (Rectangle): вычитаемый прямоугольник

        Возвращает:
        - Rectangle: новый прямоугольник, полученный путем вычитания вычитаемого прямоугольника из исходного
        """
        new_perim = abs(self.perimeter() - other.perimeter()) 
        new_length = abs(self.length - other.length)  
        new_width = round(new_perim / 2 - new_length)
        if new_width < 0:
            raise ValueError('Нельзя вычесть данные треугольники')  
        return Rectangle(new_length, new_width)

    def __eq__(self, other: 'Rectangle'): # Обязательное
        return self.area() == other.area()
    
    def __ne__(self, other: 'Rectangle'):
        return self.area() != other.area()
    
    def __gt__(self, other: 'Rectangle'): # Обязательное
        return self.area() > other.area()

    def __lt__(self, other: 'Rectangle'):
        return self.area() < other.area()

    def __ge__(self, other: 'Rectangle'): # Обязательное
        return self.area() >= other.area()

    def __le__(self, other: 'Rectangle'):
        return self.area() <= other.area()
    
    def __str__(self):
        return f'Прямоугольник со сторонами {self.length} и {self.width}'
    
    def __repr__(self):        
        return f'Rectangle({self.length}, {self.width})'
    

rect1 = Rectangle(4, 5)
rect2 = Rectangle(3, 3)

print(rect1)
print(rect2)

print(rect1.perimeter())
print(rect1.area())
print(rect2.perimeter())
print(rect2.area())

rect_sum = rect1 + rect2
rect_diff = rect1 - rect2

print(rect_sum)
print(rect_diff)

print(rect1 < rect2)
print(rect1 == rect2)
print(rect1 <= rect2)

print(repr(rect1))
print(repr(rect2))

# На выходе:

# Периметр rect1: 30
# Площадь rect2: 21
# rect1 < rect2: False
# rect1 == rect2: False
# rect1 <= rect2: False
# Периметр rect3: 50
# Ширина rect4: 2